import copy
import json
import unittest

from . import ValidatorTest
from .. import validate_instance, validate_string


VALID_VULNERABILITY = """
{
  "type": "vulnerability",
  "id": "vulnerability--0c7b5b88-8ff7-4a4d-aa9d-feb398cd0061",
  "created": "2016-05-12T08:17:27.000Z",
  "modified": "2016-05-12T08:17:27.000Z",
  "name": "CVE-2016-1234",
  "external_references": [
    {
      "source_name": "cve",
      "external_id": "CVE-2016-1234"
    }
  ]
}
"""


class VulnerabilityTestCases(ValidatorTest):
    valid_vulnerability = json.loads(VALID_VULNERABILITY)

    def test_wellformed_vulnerability(self):
        results = validate_string(VALID_VULNERABILITY, self.options)
        self.assertTrue(results.is_valid)

    def test_incorrect_cve_format(self):
        vulnerability = copy.deepcopy(self.valid_vulnerability)
        ext_refs = vulnerability['external_references']
        ext_refs[0]['external_id'] = "2016-1234"
        results = validate_instance(vulnerability, self.options)
        self.assertEqual(results.is_valid, False)

    def test_incorrect_cve_format_number(self):
        vulnerability = copy.deepcopy(self.valid_vulnerability)
        ext_refs = vulnerability['external_references']
        ext_refs[0]['external_id'] = "CVE-20161234"
        results = validate_instance(vulnerability, self.options)
        self.assertEqual(results.is_valid, False)

    def test_incorrect_cve_format_letter(self):
        vulnerability = copy.deepcopy(self.valid_vulnerability)
        ext_refs = vulnerability['external_references']
        ext_refs[0]['external_id'] = "CVE-2016-abc"
        results = validate_instance(vulnerability, self.options)
        self.assertEqual(results.is_valid, False)

    def test_incorrect_cve_format_lowercase(self):
        vulnerability = copy.deepcopy(self.valid_vulnerability)
        ext_refs = vulnerability['external_references']
        ext_refs[0]['external_id'] = "cve-2016-1234"
        results = validate_instance(vulnerability, self.options)
        self.assertEqual(results.is_valid, False)

    def test_incorrect_cve_source_name(self):
        vulnerability = copy.deepcopy(self.valid_vulnerability)
        ext_refs = vulnerability['external_references']
        ext_refs[0]['source_name'] = "CVE"
        results = validate_instance(vulnerability, self.options)
        self.assertEqual(results.is_valid, False)

    def test_url_no_hash(self):
        vulnerability = copy.deepcopy(self.valid_vulnerability)
        ext_refs = vulnerability['external_references']
        ext_refs[0]['source_name'] = "veris"
        ext_refs[0]['url'] = "https://github.com/vz-risk/VCDB/blob/master/" \
                             "data/json/0001AA7F-C601-424A-B2B8-BE6C9F5164E7.json"
        ext_refs[0]['external_id'] = "0001AA7F-C601-424A-B2B8-BE6C9F5164E7"
        self.assertFalseWithOptions(vulnerability)

        self.check_ignore(vulnerability, 'extref-hashes')

        ext_refs[0]['hashes'] = {
            "SHA-256": "6db12788c37247f2316052e142f42f4b259d6561751e5f401a1ae2a6df9c674b"
        }
        self.assertTrueWithOptions(vulnerability)


if __name__ == "__main__":
    unittest.main()
