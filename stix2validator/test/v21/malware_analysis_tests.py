import copy
import json

from . import ValidatorTest
from ... import validate_parsed_json, validate_string

VALID_MALWARE = u"""
{
    "type": "malware-analysis",
    "spec_version" : "2.1",
    "id": "malware-analysis--8e2e2d2b-17d4-4cbf-938f-98ee46b3cd3f",
    "created": "2016-04-06T20:03:48.000Z",
    "modified": "2016-04-06T20:03:48.000Z",
    "product" : "test-product",
    "version": "1.3.1",
    "result": "malicious"
}
"""


class MalwareTestCases(ValidatorTest):
    valid_malware = json.loads(VALID_MALWARE)

    def test_wellformed_malware(self):
        results = validate_string(VALID_MALWARE, self.options)
        self.assertTrue(results.is_valid)

    def test_invalid_product(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['product'] = "testinValid"
        results = validate_parsed_json(malware, self.options)
        self.assertEqual(results.is_valid, False)

        self.check_ignore(malware, 'malware-analysis-product')

    def test_software_ref(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['host_vm_ref'] = "soft-id-false"
        self.assertFalseWithOptions(malware)
        malware['host_vm_ref'] = "software--a4186d48-a4de-4146-af88-6cec55e65c69"
        self.assertTrueWithOptions(malware)

    def test_result(self):
        malware = copy.deepcopy(self.valid_malware)
        malware['result'] = "bad"
        self.assertFalseWithOptions(malware)
        malware['result'] = "malicious"
        self.assertTrueWithOptions(malware)
